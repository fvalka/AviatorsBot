// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.vektorraum.aviatorsbot.generated.metar

case class Response(request_index: Int,
  data_source: com.vektorraum.aviatorsbot.generated.metar.Data_source,
  request: com.vektorraum.aviatorsbot.generated.metar.Request,
  errors: com.vektorraum.aviatorsbot.generated.metar.Errors,
  warnings: com.vektorraum.aviatorsbot.generated.metar.Warnings,
  time_taken_ms: Int,
  data: com.vektorraum.aviatorsbot.generated.metar.Data,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val version = attributes("@version").as[String]
}

      


case class Data_source(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val name = attributes.get("@name") map { _.as[String]}
}

      


case class Request(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
}

      


case class Errors(errorssequence1: Option[com.vektorraum.aviatorsbot.generated.metar.ErrorsSequence1] = None)
      

case class ErrorsSequence1(error: String)

case class Warnings(warningssequence1: Option[com.vektorraum.aviatorsbot.generated.metar.WarningsSequence1] = None)
      

case class WarningsSequence1(warning: String)

case class Data(datasequence1: Seq[com.vektorraum.aviatorsbot.generated.metar.DataSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val num_results = attributes.get("@num_results") map { _.as[Int]}
}

      

case class DataSequence1(METAR: com.vektorraum.aviatorsbot.generated.metar.METAR)

case class METAR(raw_text: Option[String] = None,
  station_id: Option[String] = None,
  observation_time: Option[String] = None,
  latitude: Option[Float] = None,
  longitude: Option[Float] = None,
  temp_c: Option[Float] = None,
  dewpoint_c: Option[Float] = None,
  wind_dir_degrees: Option[Int] = None,
  wind_speed_kt: Option[Int] = None,
  wind_gust_kt: Option[Int] = None,
  visibility_statute_mi: Option[Float] = None,
  altim_in_hg: Option[Float] = None,
  sea_level_pressure_mb: Option[Float] = None,
  quality_control_flags: Option[com.vektorraum.aviatorsbot.generated.metar.Quality_control_flags] = None,
  wx_string: Option[String] = None,
  sky_condition: Seq[com.vektorraum.aviatorsbot.generated.metar.Sky_condition] = Nil,
  flight_category: Option[String] = None,
  three_hr_pressure_tendency_mb: Option[Float] = None,
  maxT_c: Option[Float] = None,
  minT_c: Option[Float] = None,
  maxT24hr_c: Option[Float] = None,
  minT24hr_c: Option[Float] = None,
  precip_in: Option[Float] = None,
  pcp3hr_in: Option[Float] = None,
  pcp6hr_in: Option[Float] = None,
  pcp24hr_in: Option[Float] = None,
  snow_in: Option[Float] = None,
  vert_vis_ft: Option[Int] = None,
  metar_type: Option[String] = None,
  elevation_m: Option[Float] = None)
      


case class Quality_control_flags(corrected: Option[String] = None,
  auto: Option[String] = None,
  auto_station: Option[String] = None,
  maintenance_indicator_on: Option[String] = None,
  no_signal: Option[String] = None,
  lightning_sensor_off: Option[String] = None,
  freezing_rain_sensor_off: Option[String] = None,
  present_weather_sensor_off: Option[String] = None)
      


case class Sky_condition(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val sky_cover = attributes.get("@sky_cover") map { _.as[String]}
  lazy val cloud_base_ft_agl = attributes.get("@cloud_base_ft_agl") map { _.as[Int]}
}

      

