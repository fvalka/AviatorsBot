// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.vektorraum.aviatorsbot.generated.taf

case class Response(request_index: Int,
  data_source: com.vektorraum.aviatorsbot.generated.taf.Data_source,
  request: com.vektorraum.aviatorsbot.generated.taf.Request,
  errors: com.vektorraum.aviatorsbot.generated.taf.Errors,
  warnings: com.vektorraum.aviatorsbot.generated.taf.Warnings,
  time_taken_ms: Int,
  data: com.vektorraum.aviatorsbot.generated.taf.Data,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val version = attributes("@version").as[String]
}

      


case class Data_source(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val name = attributes.get("@name") map { _.as[String]}
}

      


case class Request(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
}

      


case class Errors(errorssequence1: Option[com.vektorraum.aviatorsbot.generated.taf.ErrorsSequence1] = None)
      

case class ErrorsSequence1(error: String)

case class Warnings(warningssequence1: Option[com.vektorraum.aviatorsbot.generated.taf.WarningsSequence1] = None)
      

case class WarningsSequence1(warning: String)

case class Data(datasequence1: Seq[com.vektorraum.aviatorsbot.generated.taf.DataSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val num_results = attributes.get("@num_results") map { _.as[Int]}
}

      

case class DataSequence1(TAF: com.vektorraum.aviatorsbot.generated.taf.TAF)

case class TAF(raw_text: Option[String] = None,
  station_id: Option[String] = None,
  issue_time: Option[String] = None,
  bulletin_time: Option[String] = None,
  valid_time_from: Option[String] = None,
  valid_time_to: Option[String] = None,
  remarks: Option[String] = None,
  latitude: Option[Float] = None,
  longitude: Option[Float] = None,
  elevation_m: Option[Float] = None,
  forecast: Seq[com.vektorraum.aviatorsbot.generated.taf.Forecast] = Nil)
      


case class Forecast(fcst_time_from: Option[String] = None,
  fcst_time_to: Option[String] = None,
  change_indicator: Option[String] = None,
  time_becoming: Option[String] = None,
  probability: Option[Int] = None,
  wind_dir_degrees: Option[String] = None,
  wind_speed_kt: Option[Int] = None,
  wind_gust_kt: Option[Int] = None,
  wind_shear_hgt_ft_agl: Option[Short] = None,
  wind_shear_dir_degrees: Option[Short] = None,
  wind_shear_speed_kt: Option[Int] = None,
  visibility_statute_mi: Option[String] = None,
  altim_in_hg: Option[Float] = None,
  vert_vis_ft: Option[Short] = None,
  wx_string: Option[String] = None,
  not_decoded: Option[String] = None,
  sky_condition: Seq[com.vektorraum.aviatorsbot.generated.taf.Sky_condition] = Nil,
  turbulence_condition: Seq[com.vektorraum.aviatorsbot.generated.taf.Turbulence_condition] = Nil,
  icing_condition: Seq[com.vektorraum.aviatorsbot.generated.taf.Icing_condition] = Nil,
  temperature: Seq[com.vektorraum.aviatorsbot.generated.taf.Temperature] = Nil)
      


case class Sky_condition(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val sky_cover = attributes.get("@sky_cover") map { _.as[String]}
  lazy val cloud_base_ft_agl = attributes.get("@cloud_base_ft_agl") map { _.as[Int]}
  lazy val cloud_type = attributes.get("@cloud_type") map { _.as[String]}
}

      


case class Turbulence_condition(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val turbulence_intensity = attributes.get("@turbulence_intensity") map { _.as[String]}
  lazy val turbulence_min_alt_ft_agl = attributes.get("@turbulence_min_alt_ft_agl") map { _.as[Int]}
  lazy val turbulence_max_alt_ft_agl = attributes.get("@turbulence_max_alt_ft_agl") map { _.as[Int]}
}

      


case class Icing_condition(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val icing_intensity = attributes.get("@icing_intensity") map { _.as[String]}
  lazy val icing_min_alt_ft_agl = attributes.get("@icing_min_alt_ft_agl") map { _.as[Int]}
  lazy val icing_max_alt_ft_agl = attributes.get("@icing_max_alt_ft_agl") map { _.as[Int]}
}

      


case class Temperature(valid_time: String,
  sfc_temp_c: Option[Float] = None,
  max_temp_c: Option[String] = None,
  min_temp_c: Option[String] = None)
      

